package consumer_test

import (
	"bytes"
	"encoding/binary"
	"fmt"
	"testing"

	"github.com/KumKeeHyun/kafka-head/app/consumer"
)

var (
	metadataSet1 = []byte{0, 3, 0, 8, 99, 111, 110, 115, 117, 109, 101, 114, 0, 0, 0, 1, 0, 5, 114, 97, 110, 103, 101, 0, 47, 99, 111, 110, 115, 117, 109, 101, 114, 45, 49, 45, 102, 55, 100, 102, 52, 57, 99, 51, 45, 55, 98, 97, 102, 45, 52, 53, 49, 52, 45, 98, 100, 48, 48, 45, 57, 98, 48, 51, 101, 57, 54, 100, 49, 48, 50, 99, 0, 0, 1, 116, 118, 212, 251, 58, 0, 0, 0, 1, 0, 47, 99, 111, 110, 115, 117, 109, 101, 114, 45, 49, 45, 102, 55, 100, 102, 52, 57, 99, 51, 45, 55, 98, 97, 102, 45, 52, 53, 49, 52, 45, 98, 100, 48, 48, 45, 57, 98, 48, 51, 101, 57, 54, 100, 49, 48, 50, 99, 255, 255, 0, 10, 99, 111, 110, 115, 117, 109, 101, 114, 45, 49, 0, 13, 47, 50, 50, 48, 46, 55, 48, 46, 50, 46, 49, 54, 48, 0, 4, 147, 224, 0, 0, 39, 16, 0, 0, 0, 30, 0, 0, 0, 0, 0, 1, 0, 18, 95, 95, 99, 111, 110, 115, 117, 109, 101, 114, 95, 111, 102, 102, 115, 101, 116, 115, 0, 0, 0, 0, 0, 0, 0, 234, 0, 0, 0, 0, 0, 1, 0, 18, 95, 95, 99, 111, 110, 115, 117, 109, 101, 114, 95, 111, 102, 102, 115, 101, 116, 115, 0, 0, 0, 50, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 8, 0, 0, 0, 9, 0, 0, 0, 10, 0, 0, 0, 11, 0, 0, 0, 12, 0, 0, 0, 13, 0, 0, 0, 14, 0, 0, 0, 15, 0, 0, 0, 16, 0, 0, 0, 17, 0, 0, 0, 18, 0, 0, 0, 19, 0, 0, 0, 20, 0, 0, 0, 21, 0, 0, 0, 22, 0, 0, 0, 23, 0, 0, 0, 24, 0, 0, 0, 25, 0, 0, 0, 26, 0, 0, 0, 27, 0, 0, 0, 28, 0, 0, 0, 29, 0, 0, 0, 30, 0, 0, 0, 31, 0, 0, 0, 32, 0, 0, 0, 33, 0, 0, 0, 34, 0, 0, 0, 35, 0, 0, 0, 36, 0, 0, 0, 37, 0, 0, 0, 38, 0, 0, 0, 39, 0, 0, 0, 40, 0, 0, 0, 41, 0, 0, 0, 42, 0, 0, 0, 43, 0, 0, 0, 44, 0, 0, 0, 45, 0, 0, 0, 46, 0, 0, 0, 47, 0, 0, 0, 48, 0, 0, 0, 49, 0, 0, 0, 0}
	metadataSet2 = []byte{0, 3, 0, 8, 99, 111, 110, 115, 117, 109, 101, 114, 0, 0, 0, 2, 0, 5, 114, 97, 110, 103, 101, 0, 43, 115, 97, 114, 97, 109, 97, 45, 101, 101, 48, 98, 57, 101, 53, 53, 45, 56, 50, 51, 49, 45, 52, 101, 54, 53, 45, 56, 52, 56, 97, 45, 56, 48, 57, 53, 56, 55, 50, 54, 100, 99, 54, 102, 0, 0, 1, 116, 220, 169, 26, 197, 0, 0, 0, 2, 0, 43, 115, 97, 114, 97, 109, 97, 45, 101, 101, 48, 98, 57, 101, 53, 53, 45, 56, 50, 51, 49, 45, 52, 101, 54, 53, 45, 56, 52, 56, 97, 45, 56, 48, 57, 53, 56, 55, 50, 54, 100, 99, 54, 102, 255, 255, 0, 6, 115, 97, 114, 97, 109, 97, 0, 14, 47, 49, 50, 52, 46, 53, 55, 46, 56, 52, 46, 50, 48, 56, 0, 0, 234, 96, 0, 0, 39, 16, 0, 0, 0, 24, 0, 0, 0, 0, 0, 1, 0, 12, 99, 108, 117, 115, 116, 101, 114, 45, 116, 101, 115, 116, 255, 255, 255, 255, 0, 0, 0, 36, 0, 0, 0, 0, 0, 1, 0, 12, 99, 108, 117, 115, 116, 101, 114, 45, 116, 101, 115, 116, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 255, 255, 255, 255, 0, 43, 115, 97, 114, 97, 109, 97, 45, 55, 99, 100, 99, 99, 49, 100, 51, 45, 54, 52, 56, 48, 45, 52, 50, 100, 98, 45, 97, 98, 49, 54, 45, 102, 50, 48, 101, 100, 50, 55, 53, 98, 101, 56, 101, 255, 255, 0, 6, 115, 97, 114, 97, 109, 97, 0, 14, 47, 49, 50, 52, 46, 53, 55, 46, 56, 52, 46, 50, 48, 56, 0, 0, 234, 96, 0, 0, 39, 16, 0, 0, 0, 24, 0, 0, 0, 0, 0, 1, 0, 12, 99, 108, 117, 115, 116, 101, 114, 45, 116, 101, 115, 116, 255, 255, 255, 255, 0, 0, 0, 32, 0, 0, 0, 0, 0, 1, 0, 12, 99, 108, 117, 115, 116, 101, 114, 45, 116, 101, 115, 116, 0, 0, 0, 1, 0, 0, 0, 2, 255, 255, 255, 255}
	metadataSet3 = []byte{0, 3, 0, 8, 99, 111, 110, 115, 117, 109, 101, 114, 0, 0, 0, 1, 0, 5, 114, 97, 110, 103, 101, 0, 43, 115, 97, 114, 97, 109, 97, 45, 101, 101, 48, 98, 57, 101, 53, 53, 45, 56, 50, 51, 49, 45, 52, 101, 54, 53, 45, 56, 52, 56, 97, 45, 56, 48, 57, 53, 56, 55, 50, 54, 100, 99, 54, 102, 0, 0, 1, 116, 220, 168, 242, 183, 0, 0, 0, 1, 0, 43, 115, 97, 114, 97, 109, 97, 45, 101, 101, 48, 98, 57, 101, 53, 53, 45, 56, 50, 51, 49, 45, 52, 101, 54, 53, 45, 56, 52, 56, 97, 45, 56, 48, 57, 53, 56, 55, 50, 54, 100, 99, 54, 102, 255, 255, 0, 6, 115, 97, 114, 97, 109, 97, 0, 14, 47, 49, 50, 52, 46, 53, 55, 46, 56, 52, 46, 50, 48, 56, 0, 0, 234, 96, 0, 0, 39, 16, 0, 0, 0, 24, 0, 0, 0, 0, 0, 1, 0, 12, 99, 108, 117, 115, 116, 101, 114, 45, 116, 101, 115, 116, 255, 255, 255, 255, 0, 0, 0, 40, 0, 0, 0, 0, 0, 1, 0, 12, 99, 108, 117, 115, 116, 101, 114, 45, 116, 101, 115, 116, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 255, 255, 255, 255}
)

func TestParseMetadata(t *testing.T) {
	valueBuf := bytes.NewBuffer(metadataSet1[2:])
	valueVersion := int16(metadataSet1[1])

	metadataHeader := consumer.GroupMetadataHeader{}
	if _, err := metadataHeader.Parse(valueBuf, valueVersion); err != nil {
		t.Error(err)
		return
	}

	var numOfMember int32
	if err := binary.Read(valueBuf, binary.BigEndian, &numOfMember); err != nil {
		t.Error(err)
		return
	}
	if numOfMember <= 0 {
		fmt.Printf("header(%d) : %v\n", valueVersion, metadataHeader)
	}
	for i := 0; i < int(numOfMember); i++ {
		member := consumer.MemberMetadata{}
		if _, err := member.Parse(valueBuf, valueVersion); err != nil {
			t.Error(err)
			return
		} else {
			fmt.Printf("header(%d) : %v\n", valueVersion, metadataHeader)
			fmt.Printf("member     : %v\n\n", member)
		}
	}
}
